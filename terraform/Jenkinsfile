def EC2_PUBLIC_IP = ""

pipeline {
    agent none

    tools {
        maven "mymaven"
    }

    environment {
        DEV_SERVER_IP = 'ec2-user@172.31.16.83'
        IMAGE_NAME = "karthikmv93/docker"
    }

    parameters {
        string(name: 'Env', defaultValue: 'Test', description: 'Env to deploy')
        booleanParam(name: 'executeTests', defaultValue: true, description: 'Decide to run test cases')
        choice(name: 'APPVERSION', choices: ['1.1', '2.1', '3.1'])
    }

    stages {
        stage('Package & Push the Image to Registry') {
            agent any
            steps {
                script {
                    sshagent(['slave2']) {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                            echo "Packaging the code version: ${params.APPVERSION}"
                            sh "ssh -o StrictHostKeyChecking=no ${DEV_SERVER_IP} sudo yum install docker -y"
                            sh "scp -o StrictHostKeyChecking=no server-script.sh ${DEV_SERVER_IP}:/home/ec2-user"
                            sh "ssh -o StrictHostKeyChecking=no ${DEV_SERVER_IP} 'bash ~/server-script.sh ${IMAGE_NAME} ${BUILD_NUMBER}'"
                            sh "ssh ${DEV_SERVER_IP} sudo docker login -u ${USERNAME} -p ${PASSWORD}"
                            sh "ssh ${DEV_SERVER_IP} sudo docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }

        stage('Provisioning the Infra') {
            agent any
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                    dir('terraform') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                        EC2_PUBLIC_IP = sh (
                            script: "terraform output -raw ec2-ip",
                            returnStdout: true
                        ).trim()
                        echo "Provisioned EC2 IP: ${EC2_PUBLIC_IP}"
                    }
                    }
                }
            }
        }

        stage('Deploy') {
            agent any
            input {
                message "Select the version to deploy"
                ok "OK"
                parameters {
                    choice(name: 'APP', choices: ['1.1', '2.1', '3.1'])
                }
            }
            steps {
                script {
                    sshagent(['slave2']) {
                        echo "Waiting for EC2 instance to initialize..."
                        sleep(time: 90, unit: "SECONDS")
                        echo "Deploying to: ${EC2_PUBLIC_IP}"

                        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                            sh "scp -o StrictHostKeyChecking=no server-script.sh ec2-user@${EC2_PUBLIC_IP}:/home/ec2-user"
                            sh "ssh ec2-user@${EC2_PUBLIC_IP} sudo yum install docker -y"
                            sh "ssh ec2-user@${EC2_PUBLIC_IP} sudo systemctl start docker"
                            sh "ssh ec2-user@${EC2_PUBLIC_IP} sudo docker login -u ${USERNAME} -p ${PASSWORD}"
                            sh "ssh ec2-user@${EC2_PUBLIC_IP} sudo docker run -itd -p 8080:8080 ${IMAGE_NAME}:${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }
    } // <-- end of stages
} // <-- end of pipeline
